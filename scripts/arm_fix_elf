#!/bin/bash
# HACK: fix ARM elf files obtained with objcopy -I binary -O elf
# The problem is that objcopy does not add a .ARM.attributes section to
# output elf files. Since .ARM.attributes always contains the same data,
# we just get it from another .o file containing .ARM.attributes and add
# it to the input file, which is then ready to be linked to the rest of the
# program.
# See https://sourceware.org/ml/binutils/2014-09/msg00225.html for more details
# on this problem and a possible patch for ld.
# set -x

[ $# -lt 2 ] && { echo "Use $0 <input_file> <any_object_file>, where \
<any_object_file> is a .o generated by the same toolchain you want to \
link <input_file> to" ; exit 1 ; }

[ -f $1 ] || { echo "File $1 does not exist" ; exit 127 ; }
[ -f $2 ] || { echo "File $2 does not exist" ; exit 127 ; }
[ -n "$OBJCOPY" ] || { echo "OBJCOPY env var is empty" ; exit 127 ; }
[ -n "$LD" ] || { echo "LD env var is empty" ; exit 127 ; }

tf=$(tempfile)
ttf=$(tempfile)

# Extract .ARM.attributes from any_objecat_file
# We rename .ARM.attributes to make the linker happy when linking to the input
# file (see next step)
$OBJCOPY --only-section .ARM.attributes --rename-section \
    .ARM.attributes=.arm_fix_elf_section $2 $tf || exit 1

# Link the input file to the temporary file containing the renamed
# .ARM.attributes section
# The linker will be ok with this (except for an apparently non fatal error:
# Conflicting CPU architectures 0/12), since none of these files has a
# .ARM.attributes section
$LD -r $1 $tf -o $ttf || exit 2

rm $1
mv $ttf $1

rm $tf
