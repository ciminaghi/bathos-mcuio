#!/bin/bash
# Generate usb data file

. $(dirname $0)/usb-functions

help() {
    echo "use $0 <usb_config_file> <output_file>"
}

# Empty for platform data generation
device_descriptor_end() {
    return 0
}


[ $# -ge 2 ] || { help ; exit 1 ; }

config_file=$1
out=$2
genmode=data

eps=

read_config_file $1

cat > $out <<EOF
/*
 * This file was automatically generated by $0 on $(date)
 * Config file: $config_file
 */
#include <bathos/usb-device.h>
#include <bathos/usb-device-controller.h>

EOF

neps=$(echo $eps | wc -w)

echo "Found $neps endpoints"

echo -n "Adding endpoints ... "
echo '/* USB endpoints */' >> $out
echo >> $out


echo "static struct usb_device_endpoint_data usb_ep_data[];" >> $out
echo "" >> $out

# Add control ep devices (one per interface)
for d in $(seq 0 $((interface_index - 1))) ; do
    echo "struct bathos_dev  \
usb_ep_dev_ep0_if${d} __attribute__((section(\".bathos_devices\"))) = {" >> $out
    echo -e "\t.name = \"usb-ep0-if${d}\"," >> $out
    echo -e "\t.ops = &usb_ep_dev_ops," >> $out
    echo -e "\t.priv = &usb_endpoints[0]," >> $out
    echo -e "};" >> $out
    echo "" >> $out
done

for ep in $eps ; do
    index=$(echo $ep | cut -d ',' -f 1)
    name="usb-ep${index}"
    echo "struct bathos_dev __attribute__((section(\".bathos_devices\"))) \
usb_ep_dev_ep${index} = {" >> $out
    echo -e "\t.name = \"$name\"," >> $out
    echo -e "\t.ops = &usb_ep_dev_ops," >> $out
    echo -e "\t.priv = &usb_endpoints[${index}]," >> $out
    echo -e "};" >> $out
    echo "" >> $out
done

echo -e "struct bathos_dev *usb_devs_ep0[] = {" >> $out

for i in $(seq 0 $((interface_index - 1))) ; do
    echo -e "\t&usb_ep_dev_ep0_if${i}," >> $out
done

echo "};" >> $out

echo "" >> $out

for ep in $eps ; do
    index=$(echo $ep | cut -d ',' -f 1)
    echo -e "struct bathos_dev * PROGMEM usb_devs_ep${index}[] = {" >> $out
    type=$(echo $ep | cut -d ',' -f 3)
    echo -e "\t&usb_ep_dev_ep${index}," >> $out
    echo -e "};" >> $out
    echo "" >> $out
done

echo "extern struct usb_device_controller USB_DEVICE_CONTROLLER_NAME(0);" \
    >> $out

echo "" >> $out

echo "extern struct usb_device_tx_buf tx_bufs_ep0[];" >> $out

for ep in $eps ; do
    index=$(echo $ep | cut -d ',' -f 1)
    d=$(eval echo "\$ep_${index}_dir")
    if [ "$d" = "in" ] ; then
	echo "extern struct usb_device_tx_buf tx_bufs_ep${index}[];" >> $out
    fi
done

echo "" >> $out

echo 'struct usb_device_endpoint usb_endpoints[] = {' >> $out

# ep0
echo -e "\t[0] = {" >> $out
echo -e "\t\t.data = &usb_ep_data[0]," >> $out
echo -e "\t\t.dev = usb_devs_ep0," >> $out
echo -e "\t\t.hl_ops = &usb_device_control_ep_ops," >> $out
echo -e "\t\t.controller = &USB_DEVICE_CONTROLLER_NAME(0)," >> $out
echo -e "\t\t.tx_bufs = tx_bufs_ep0," >> $out
echo -e "\t\t.ep_address = 0," >> $out
echo -e "\t\t.iso = 0," >> $out
echo -e "\t\t.size = 8," >> $out
echo -e "\t}," >> $out

for ep in $eps ; do
    index=$(echo $ep | cut -d ',' -f 1)
    type=$(echo $ep | cut -d ',' -f 3)
    d=$(eval echo "\$ep_${index}_dir")
    sz=$(eval echo "\$ep_${index}_size")
    [ "$type" = "iso" ] && iso=1 || iso=0
    [ "$d" = "in" ] && dbit=0x80 || dbit=0
    [ "$d" = "in" ] && txbs=tx_bufs_ep${index} || txbs=NULL
    echo -e "\t[$index] = {" >> $out
    echo -e "\t\t.data = &usb_ep_data[$index]," >> $out
    echo -e "\t\t.dev = usb_devs_ep${index}," >> $out
    echo -e "\t\t.hl_ops = &usb_device_${type}_ep_ops," >> $out
    echo -e "\t\t.controller = &USB_DEVICE_CONTROLLER_NAME(0)," >> $out
    echo -e "\t\t.tx_bufs = $txbs," >> $out
    echo -e "\t\t.ep_address = ${index} | ${dbit}," >> $out
    echo -e "\t\t.iso = $iso," >> $out
    echo -e "\t\t.size = $sz," >> $out
    echo -e "\t}," >> $out
done

echo -e "};" >> $out

echo OK

# Variables ep_X_size should have been setup by each function generator for
# eps 1 .. 16
ep_0_size=8

mach_extra=$(dirname $0)/finish_usb_data_$CONFIG_MACH
if [ -f $mach_extra ] ; then
    echo -n "Sourcing mach extra script ($mach_extra) ... "
    . $mach_extra
    echo OK
fi

echo -n "Running finish functions ... "

for f in $finish_funcs ; do
    eval $(echo $f | tr ',' ' ')
done

echo OK
