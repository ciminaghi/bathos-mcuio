# Read .config first (if any) and use those values
# But we must remove the quotes from these Kconfig values
BUILD_DIR ?= $(shell pwd)
-include $(BUILD_DIR)/.config
ARCH ?= $(patsubst "%",%,$(CONFIG_ARCH))
MACH ?= $(patsubst "%",%,$(CONFIG_MACH))
BOARD ?= $(patsubst "%",%,$(CONFIG_BOARD))
FAMILY ?= $(patsubst "%",%,$(CONFIG_FAMILY))
PACKAGE = $(patsubst "%",%,$(CONFIG_MACH_PACKAGE))
CROSS_COMPILE ?= $(patsubst "%",%,$(CONFIG_CROSS_COMPILE))
MODE ?= $(patsubst "%",%,$(CONFIG_MEMORY_MODE))
HZ ?= $(patsubst "%",%,$(CONFIG_HZ))
THOS_QUARTZ ?= $(patsubst "%",%,$(CONFIG_THOS_QUARTZ))
BATHOS_GIT=$(shell export SRC_DIR=$(SRC_DIR) ; $(SCRIPTS)/get_version)

SCRIPTS:=$(SRC_DIR)/scripts

# if no .config is there, ARCH is still empty, this would prevent a simple
# "make config"
ifeq ($(ARCH),)
  ARCH = atmega
endif

# Any tasks coming from configuration ?
ifndef TASK-y
  ifeq ($(CONFIG_TASK_LOOPBACK_PIPE), y)
    TASK-y+=task-loopback-pipe.o
  endif
endif

ifeq ($(CONFIG_NR_INTERRUPTS),)
NR_INTERRUPTS=0
INT_EVENTS_OBJS=
INT_EVENTS_OBJ=
else
NR_INTERRUPTS:=$(CONFIG_NR_INTERRUPTS)
INT_EVENTS_OBJS=$(foreach i,$(shell seq 0 $$(($(NR_INTERRUPTS) - 1))),\
		  interrupt_event_$i.o)
INT_EVENTS_OBJ=interrupt_events.o
endif


# First: the target. After that, we can include the arch Makefile
ifeq ($(CONFIG_RELOCATABLE_ONLY),y)
all: bathos.o
else # CONFIG_RELOCATABLE_ONLY
all: bathos.bin bathos.hex
endif

# LDFLAGS for generation of final relocatable (before final link)
# This stuff may be overridden by arch Makefile
BATHOS_LIBS = -L$(BUILD_DIR) -L$(BUILD_DIR)/lib/ -L$(BUILD_DIR)/$(ADIR) \
-L$(BUILD_DIR)/drivers -Wl,--start-group -lbathos -larch -ldrivers \
-Wl,--end-group

ADIR = arch-$(ARCH)
include $(ADIR)/Makefile

# Task choice. This follows the -y convention, to allow use of $(CONFIG_STH) 
# The arch may have its choice, or you can override on the command line
TASK-y ?= task-uart.o

# Cross compiling:
AS              = $(CROSS_COMPILE)as
LD              = $(CROSS_COMPILE)ld
CC              = $(CROSS_COMPILE)gcc
CPP             = $(CC) -E
AR              = $(CROSS_COMPILE)ar
NM              = $(CROSS_COMPILE)nm
STRIP           = $(CROSS_COMPILE)strip
OBJCOPY         = $(CROSS_COMPILE)objcopy
OBJDUMP         = $(CROSS_COMPILE)objdump

export CC OBJDUMP OBJCOPY LD ARCH BUILD_DIR SRC_DIR SCRIPTS

# host gcc
HOSTCC ?= gcc
HOST_CFLAGS ?= -I$(SRC_DIR)/include

BOOT_OBJ ?= $(ADIR)/boot.o
IO_OBJ ?= $(ADIR)/io.o

# Files that depend on the architecture (bathos.lds may be missing)
AOBJ  += $(BOOT_OBJ) $(IO_OBJ)

# The user can pass USER_CFLAGS if needed
CFLAGS += $(USER_CFLAGS) -DMACH=$(MACH) -DBATHOS_GIT=\"$(BATHOS_GIT)\" -DMODULE_NAME=$(subst -,_,$(subst /,_,$(subst .o,,$@))) -DHZ=$(HZ) -DTHOS_QUARTZ=$(THOS_QUARTZ)

# There may or may not be a linker script (arch-unix doesn't)
LDS   ?= $(wildcard $(ADIR)/bathos$(MODE).lds)

# Lib objects and flags
LOBJ = pp_printf/printf.o pp_printf/vsprintf-xint.o
CFLAGS  += -I$(SRC_DIR)/pp_printf -DCONFIG_PRINT_BUFSIZE=100

# Use our own linker script, if it exists
LDFLAGS += $(patsubst %.lds, -T %.lds, $(LDS))

# Each architecture can have specific drivers
LDFLAGS += $(LIBARCH)

# Add $(LIBDRIVERS) because console_init() console_putc() could be stored there
LDFLAGS += $(LIBDRIVERS)

# This is currently needed by the bathos allocator
# Default value of BITS_PER_LONG is 32, can be overridden in arch makefile
BITS_PER_LONG ?= 32
CFLAGS += -DBITS_PER_LONG=$(BITS_PER_LONG)

# We have drivers too, let its Makefile do it all
include drivers/Makefile

# Same for the generic library
include lib/Makefile

# Include mcuio stuff
include mcuio/Makefile

# Include lininoio stuff
include lininoio/Makefile

# As the system goes larger, we need libgcc to resolve missing symbols
LDFLAGS += $(shell $(CC) $(CFLAGS) --print-libgcc-file-name)


# Task object files. All objects are placed in tasks/ but the source may
# live in tasks-$(ARCH), to allow similar but different implementations
TOBJ := $(patsubst %, tasks/%, $(TASK-y))
TOBJ := $(patsubst tasks/arch/%, tasks-$(ARCH)/%, $(TOBJ))

# Calculate VPATH now
VPATH := $(SRC_DIR):$(SRC_DIR)/lib:$(SRC_DIR)/tasks-$(ARCH):$(USER_SRC_DIR)

# Generic flags
GENERIC_CFLAGS := -I$(SRC_DIR)/include -I$(BUILD_DIR)/include -I$(SRC_DIR)/$(ADIR) -g -Wall -ffreestanding -Os
CFLAGS  += $(GENERIC_CFLAGS)
ASFLAGS += -g -Wall

# Our target
bathos.bin: bathos
	$(OBJCOPY) -O binary $^ $@

bathos: bathos.o
	$(CC) bathos.o $(LDFLAGS) -o $@

%.hex: %
	$(OBJCOPY) -O ihex $^ $@

obj-y +=  main.o sys_timer.o periodic_scheduler.o version_data.o \
$(INT_EVENTS_OBJ) $(AOBJ) $(TOBJ) $(LOBJ) $(LIBARCH) $(LIBS)

$(INT_EVENTS_OBJ): $(INT_EVENTS_OBJS)
	$(LD) -r -o $@ $+

interrupt_event_%.o: interrupt_event.c
	$(CC) $(CFLAGS) -DINTNO=$* -c -o $@ $<

bathos.o: silentoldconfig $(obj-y) $(ARCH_EXTRA) $(BUILD_DIR)/events.lds
	$(LD) -r -T $(SRC_DIR)/bigobj.lds $(obj-y) -o $@

$(BUILD_DIR)/events.lds: FORCE
	$(SCRIPTS)/evt_ldsgen $@ $(SRC_DIR) $(SRC_DIR)/lib/ $(SRC_DIR)/$(ADIR) \
	$(SRC_DIR)/$(MACH_DIR) $(SRC_DIR)/tasks $(SRC_DIR)/tasks-$(ARCH) $(SRC_DIR)/drivers/ $(SRC_DIR)/mcuio $(SRC_DIR)/lininoio $(USER_SRC_DIR)

version_data.o:
	export SCRIPTS=$(SCRIPTS) CC=$(CC) OBJDUMP=$(OBJDUMP) \
	OBJCOPY=$(OBJCOPY) ; \
	$(SCRIPTS)/gen_version_data $(BATHOS_GIT) \
	$$($(SCRIPTS)/get_bin_format) $@

clean:
	rm -f $(BUILD_DIR)/bathos.bin $(BUILD_DIR)/bathos $(BUILD_DIR)/*.o \
	$(BUILD_DIR)/*~
	rm -f $(BUILD_DIR)/drivers/usb-data.* \
	$(BUILD_DIR)/drivers/usb-descriptors.*
	find $(BUILD_DIR) -name '*.o' -o -name '*~' -o -name '*.a' | \
		grep -v $(SCRIPTS)/kconfig | xargs rm -f
	rm -f $(SCRIPTS)/allocator_aux_gen
	rm -f $(BUILD_DIR)/lib/allocator-tables.o \
	$(BUILD_DIR)/lib/allocator-tables.c \
	rm -f $(BUILD_DIR)/mcuio/*.o
	for f in $(MCUIO_TABLES_OBJS) ; do \
		rm -f $(BUILD_DIR)/$(patsubst %.o,%.c,$$f) ; \
	done
	for f in $(GPIOS_NAMES_FILE) $(GPIOS_CAPS_FILE) ; do \
		rm -f $(BUILD_DIR)/$$f ; \
	done
	rm -f $(BUILD_DIR)/events.lds

distclean: clean
	rm -f .config include/generated/autoconf.h

FORCE:

# following targets from Makefile.kconfig
silentoldconfig:
	@mkdir -p include/config
	$(MAKE) -f Makefile.kconfig $@

scripts_basic config:
	$(MAKE) -f Makefile.kconfig $@

%config:
	$(MAKE) -f Makefile.kconfig $@

defconfig:
	@echo "Using yun_defconfig"
	@test -f $(BUILD_DIR)/.config || touch $(BUILD_DIR)/.config
	@$(MAKE) -f Makefile.kconfig yun_defconfig


.config: silentoldconfig

.PHONY: version_data.o
